-- Exercise 1
-- write a query that will output the average number of tests completed by unique dogs in each personality dimension. Choose either the query in Question 2 or 3 to serve as an inner query in your main query. If you have trouble, make sure you use the appropriate aliases in your GROUP BY and SELECT statements

SELECT
    inner_query.dimension,
    AVG(inner_query.number)
FROM
    (
      SELECT
          dogs.dog_guid,
          dogs.dimension AS dimension,
          COUNT(complete_tests.created_at) AS number
    FROM
        dogs INNER JOIN complete_tests
        ON dogs.dog_guid=complete_tests.dog_guid
        GROUP BY dogs.dog_guid, dogs.dimension
    ) AS inner_query
GROUP BY
    inner_query.dimension;



-- Exercise 2
-- How many unique DogIDs are summarized in the Dognition dimensions labeled "None" or ""?

SELECT
    inner_query.dimension,
    COUNT(dogid)
FROM
    (
      SELECT dogs.dog_guid AS dogid, dogs.dimension AS dimension
      FROM dogs JOIN complete_tests ON dogs.dog_guid=complete_tests.dog_guid
      WHERE dogs.dimension IS NULL OR dogs.dimension=''
      GROUP BY dogs.dog_guid
      ) AS inner_query
group by inner_query.dimension;


-- Exercise 3
-- To determine whether there are any features that are common to all dogs that have non-NULL empty strings in the dimension column, write a query that outputs the breed, weight, value in the "exclude" column, first or minimum time stamp in the complete_tests table, last or maximum time stamp in the complete_tests table, and total number of tests completed by each unique DogID that has a non-NULL empty string in the dimension column.

SELECT DISTINCT
    dogs.dog_guid,
    dogs.breed,
    dogs.weight,
    dogs.exclude,
    MIN(complete_tests.created_at) AS first,
    MAX(complete_tests.created_at) AS last,
    COUNT(complete_tests.created_at),
    dogs.dimension
FROM
    dogs INNER JOIN complete_tests
    ON dogs.dog_guid=complete_tests.dog_guid
WHERE
    dogs.dimension IS NOT NULL
    AND dogs.dimension = ''
GROUP BY
    dogs.dog_guid,
    dogs.breed,
    dogs.weight,
    dogs.exclude;


-- Exercise 4
-- Rewrite the previous query to exclude DogIDs with (1) non-NULL empty strings in the dimension column, (2) NULL values in the dimension column, and (3) values of "1" in the exclude column. NOTES AND HINTS: You cannot use a clause that says d.exclude does not equal 1 to remove rows that have exclude flags, because Dognition clarified that both NULL values and 0 values in the "exclude" column are valid data. A clause that says you should only include values that are not equal to 1 would remove the rows that have NULL values in the exclude column, because NULL values are never included in equals statements. In addition, although it should not matter for this query, practice including parentheses with your OR and AND statements that accurately reflect the logic you intend.

SELECT
    inner_query.dimension,
    AVG(inner_query.number),
    inner_query.exclude,
    COUNT(inner_query.number)
FROM
    (
      SELECT
          dogs.dog_guid,
          dogs.dimension AS dimension,
          COUNT(complete_tests.created_at) AS num,
          dogs.exclude
     FROM dogs INNER JOIN complete_tests
          ON dogs.dog_guid=complete_tests.dog_guid
     WHERE
        dogs.dimension IS NOT NULL
        AND dogs.dimension <> ''
        AND (dogs.exclude IS NULL OR dogs.exclude = 0)
        GROUP BY dogs.dog_guid, dogs.dimension
      ) AS inner_query
GROUP BY inner_query.dimension;


-- Exercise 5
-- Examine the relationship between breed_group and number of tests completed. Exclude DogIDs with values of "1" in the exclude column

SELECT
    inner_query.breed_group,
    AVG(inner_query.number_dogs),
    COUNT(number_dogs)
FROM
    (
      SELECT
          dogs.dog_guid,
          dogs.breed_group AS breed_group,
          COUNT(complete_tests.created_at) AS number_dogs
      FROM
          dogs INNER JOIN complete_tests
          ON dogs.dog_guid=complete_tests.dog_guid
      WHERE
          dogs.exclude IS NULL
          OR dogs.exclude=0
      GROUP BY dogs.dog_guid
      ) AS inner_query
GROUP BY inner_query.breed_group;


-- Exercise 6
-- For each unique DogID, output its dog_guid, breed_type, number of completed tests, and use a CASE statement to include an extra column with a string that reads "Pure_Breed" whenever breed_type equals 'Pure Breed" and "Not_Pure_Breed" whenever breed_type equals anything else. LIMIT your output to 50 rows for troubleshooting.

SELECT
    dogs.dog_guid,
    dogs.breed_type,
    COUNT(complete_tests.created_at),
    CASE
        WHEN dogs.breed_type = 'Pure Breed' THEN 'Pure Breed'
        ELSE 'Not_Pure_Breed'
        END AS Pure_not_pure
FROM
    dogs INNER JOIN complete_tests
    ON dogs.dog_guid=complete_tests.dog_guid
GROUP BY
    dogs.dog_guid,
    dogs.breed_type
LIMIT 50;


-- Exercise 7
-- Adapt your previous queries to examine the relationship between breed_type and number of tests completed by Pure_Breed dogs and non_Pure_Breed dogs.

SELECT inner_query.Pure_not_pure, COUNT(inner_query.dogid)
FROM
    (
      SELECT
          dogs.dog_guid AS dogid,
          dogs.breed_type AS breed,
          COUNT(complete_tests.created_at) AS num,
          CASE
              WHEN dogs.breed_type = 'Pure Breed' THEN 'Pure Breed'
              ELSE 'Not_Pure_Breed'
              END AS Pure_not_pure
      FROM
        dogs INNER JOIN complete_tests
        ON dogs.dog_guid=complete_tests.dog_guid
      WHERE
        dogs.exclude IS NULL
        OR dogs.exclude=0
     GROUP BY dogs.dog_guid, dogs.breed_type
      ) AS inner_query
GROUP BY inner_query.Pure_not_pure;


-- Exercise 8
--  Write a query that calculates the average amount of time it took each dog breed_type to complete all of the tests in the exam_answers table. Exclude negative durations from the calculation, and include a column that calculates the standard deviation of durations for each breed_type group:


SELECT
    dogs.breed_type,
    AVG(TIMESTAMPDIFF(minute, exam_answers.start_time, exam_answers.end_time)) AS duration,
    STDDEV(TIMESTAMPDIFF(minute, exam_answers.start_time, exam_answers.end_time))
FROM
    dogs INNER JOIN exam_answers
    ON dogs.dog_guid=exam_answers.dog_guid
WHERE
    (TIMESTAMPDIFF(minute, exam_answers.start_time, exam_answers.end_time)) > 0
GROUP BY
    dogs.breed_type;


    
